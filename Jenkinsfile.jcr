pipeline {
  agent any

  stages {  
    
    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv(credentialsId:'sonarqube',installationName:'sonarqube')  {
          sh "./mvnw clean verify sonar:sonar -Dsonar.projectKey=PetClinic -Dsonar.projectName='PetClinic'"
        }
      }
    }
    
    stage('build') {
      steps {
        sh './mvnw package'
      }
    }

    stage('docker build') {
      steps {
        sh 'docker build -t jfrog-cr.10-35-151-40.nip.io/docker-local/petclinic:${BUILD_NUMBER} .'
      }
    }

    stage('scan image') {
      steps {
        neuvector nameOfVulnerabilityToExemptFour: '',
        nameOfVulnerabilityToExemptOne: '', nameOfVulnerabilityToExemptThree: '', standaloneScanner: true,
        nameOfVulnerabilityToExemptTwo: '', nameOfVulnerabilityToFailFour: '', nameOfVulnerabilityToFailOne: '', 
        nameOfVulnerabilityToFailThree: '', nameOfVulnerabilityToFailTwo: '', numberOfHighSeverityToFail: '', 
        numberOfMediumSeverityToFail: '', registrySelection: 'Local', repository: 'jfrog-cr.10-35-151-40.nip.io/docker-local/petclinic', 
        scanLayers: true, scanTimeout: 10, tag: '${BUILD_NUMBER}'
      }
    }
    stage('configure docker ca cert'){
        withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: '', contextName: '', credentialsId: 'prdrke2-k8s', namespace: '', serverUrl: '']]) {
          sh "kubectl get secret -n jfrog jfrog-tls -o jsonpath='{.data.tls\\.key}' | base64 -d > /etc/docker/certs.d/jfrog-cr.10-35-151-40.nip.io/ca.crt"
        }
    }
    stage('docker push') {
      steps {
        withDockerRegistry(credentialsId: 'admin-jcr', url: 'https://jfrog-cr.10-35-151-40.nip.io/') {
         sh 'docker push jfrog-cr.10-35-151-40.nip.io/docker-local/petclinic:${BUILD_NUMBER}'
        }
        
      }
    }

    stage('deploy') {
      steps {
        withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: '', contextName: '', credentialsId: 'prdrke2-k8s', namespace: '', serverUrl: '']]) {
          sh '''kubectl create deployment -n pet1 --image=jfrog-cr.10-35-151-40.nip.io/docker-local/petclinic:${BUILD_NUMBER} petclinic  --dry-run=client -o yaml |kubectl apply -f -
          kubectl expose deploy petclinic -n pet1 --port=8080 --dry-run=client -o yaml |kubectl apply -f -
          kubectl create ingress -n pet1 pet-ingress --class=nginx1 --rule="petclinic.10-35-151-199.nip.io/*=petclinic:8080" --dry-run=client -o yaml | kubectl apply -f -'''
        }

      }
    }

  }
}
